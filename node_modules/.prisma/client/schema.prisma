generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  phoneNumber   String?         @unique
  email         String?         @unique
  fullName      String
  password      String
  status        String          @default("active")
  notifications Notifications[]
  transactions  Transaction[]
  wallet        Int             @default(0)
  profileImage  Int?
  deletedAt     DateTime?
  bids          Bid[]
  accNumber     String?
  ifsc          String?
  phonePe       String?
  googlePay     String?
  paytm         String?
  upi           String?
  deviceToken   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  Admins        Admins?         @relation(fields: [adminsId], references: [id])
  adminsId      Int?
  fileName      String? // The name of the file
  fileType      String? // The MIME type of the file (e.g., 'image/jpeg', 'application/pdf')
  fileData      Bytes?
}

model Notifications {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  isRead      Boolean   @default(false)
  user        Users     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime  @default(now())
}

model File {
  id        Int       @id @default(autoincrement())
  fileName  String // The name of the file
  fileType  String // The MIME type of the file (e.g., 'image/jpeg', 'application/pdf')
  fileData  Bytes
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Market {
  id            Int             @id @default(autoincrement())
  marketId      String          @unique
  status        String          @default("active")
  marketName    String
  openTime      Decimal         @db.Decimal(10, 2) // Storing time as Decimal
  closeTime     Decimal         @db.Decimal(10, 2) // Storing time as Decimal
  resultDate    DateTime?
  openResult    String?
  openPanna     String?
  closeResult   String?
  closePanna    String?
  games         Game[]          @relation("MarketGames")
  bids          Bid[]
  deletedAt     DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  Admins        Admins?         @relation(fields: [adminsId], references: [id])
  adminsId      Int?
  weekdayStatus Json            @default("{\"0\": \"active\", \"1\": \"active\", \"2\": \"active\", \"3\": \"active\", \"4\": \"active\", \"5\": \"active\", \"6\": \"active\"}")
  ResultHistory ResultHistory[]
}

model Game {
  id        Int       @id @default(autoincrement())
  gameName  String
  rate      Decimal   @default(0) @db.Decimal(10, 2)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  bids      Bid[]
  updatedAt DateTime  @default(now())
  markets   Market[]  @relation("MarketGames")
  Admins    Admins?   @relation(fields: [adminsId], references: [id])
  adminsId  Int?
  fileName  String? // The name of the file
  fileType  String? // The MIME type of the file (e.g., 'image/jpeg', 'application/pdf')
  fileData  Bytes?
}

model Transaction {
  id        Int               @id @default(autoincrement())
  type      TransactionType
  status    TransactionStatus
  amount    Decimal           @db.Decimal(10, 2)
  user      Users             @relation(fields: [userId], references: [id])
  userId    Int
  deletedAt DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
}

model noticesRules {
  id          Int       @id @default(autoincrement())
  description String
  active      Boolean   @default(true)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  Admins      Admins?   @relation(fields: [adminsId], references: [id])
  adminsId    Int?
}

enum TransactionType {
  WITHDRAWAL
  ADDITION
}

enum TransactionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Bid {
  id         Int       @id @default(autoincrement())
  user       Users     @relation(fields: [userId], references: [id])
  userId     Int
  market     Market    @relation(fields: [marketId], references: [id])
  marketId   Int
  game       Game      @relation(fields: [gameId], references: [id])
  gameId     Int
  date       DateTime // Date when the bid was placed
  status     String    @default("pending")
  session    String // The session (open or close)
  bidDigit   String // The digit the user bid on
  pannaDigit String?
  openDigit  String?
  openPanna  String?
  closeDigit String?
  closePanna String?
  bidAmount  Decimal   @db.Decimal(10, 2) // Amount the user placed on the bid
  winAmount  Decimal   @db.Decimal(10, 2) // The amount the user wins (if they win)
  winStatus  Boolean   @default(false) // Whether the user won or not
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}

model Admins {
  id           Int            @id @default(autoincrement())
  phoneNumber  String?        @unique
  email        String?        @unique
  fullName     String
  password     String
  deletedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Users        Users[]
  Market       Market[]
  Game         Game[]
  noticesRules noticesRules[]
}

model Banner {
  id        Int       @id @default(autoincrement())
  fileName  String // The name of the file
  fileType  String // The MIME type of the file (e.g., 'image/jpeg', 'application/pdf')
  fileData  Bytes
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Setting {
  id        Int       @id @default(autoincrement())
  minBet    Decimal   @default(0) @db.Decimal(10, 2)
  maxBet    Decimal?  @default(0) @db.Decimal(10, 2)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model ResultHistory {
  id         Int      @id @default(autoincrement())
  marketId   Int
  market     Market   @relation(fields: [marketId], references: [id])
  date       DateTime
  pannaDigit String
  bidDigit   String
  session    String // Can be "open" or "close"
  createdAt  DateTime @default(now())
}
